{"version":3,"sources":["Components/Calendar.jsx","App.js","index.js"],"names":["Calendar","props","newValues","month","year","parseInt","changeDay","Date","getDay","numberOfDays","getDate","prevDate","prevMonthDays","i","unshift","allDays","value","celebrations","map","event","push","addDays","length","weeksBySeven","splice","newDate","showValues","row","item","className","id","App","useState","getFullYear","newYear","getMonth","newMonth","setCelebrations","months","useEffect","text","axios","get","then","res","data","split","filteredCelebrations","filter","celebration","options","type","realMonth","result","valueOfDate","onChange","target","slice","isNaN","min","max","colSpan","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52ca3c8f.chunk.js","sourcesContent":["const Calendar = (props) => {\r\n  /**\r\n   * Funkcija, ki na podlagi prejetega meseca in leta zgenerira seznam dni v trenutnem meseceu\r\n   * Ce se mesec zacne na katerikoli drug datum kot ponedeljek, doda potrebno stevilo dni iz prejsnjega meseca.\r\n   * Prav tako je s koncem meseca. Ce se ne konca na nedeljo, potem doda potrebno stevilo dni prihodnjega meseca.\r\n   */\r\n\r\n  const newDate = (month, year) => {\r\n    // month in year v Number, ker drugace jih uporabi kot String\r\n    month = parseInt(month);\r\n    year = parseInt(year);\r\n\r\n    const date = new Date(year, month);\r\n\r\n    // Podatki o trenutnem mesecu\r\n\r\n    // Problem pri date je, da je v osnovi prvi dan v tednu nedelja, zato se to s preprosto zamenjavo spremeni da je prvi dan ponedeljek\r\n    let changeDay = date.getDay() - 1;\r\n    if (changeDay === -1) {\r\n      changeDay = 6;\r\n    }\r\n\r\n    // Stevilo dni v izbranem mesecu\r\n    const numberOfDays = new Date(year, month + 1, 0).getDate();\r\n\r\n    // Podatki o prejsnjem mesecu\r\n    // Stevilo dni v prejsnjem mesecu\r\n    const prevDate = new Date(year, month - 1, 0).getDate();\r\n\r\n    // prevMonthDays je seznam, ki se ga v primeru, da se trenutni mesec ne zacne v ponedeljek, napolni s pravim stevilom dni iz prejsnjega\r\n    let prevMonthDays = [];\r\n    for (let i = prevDate; i > prevDate - changeDay; i--) {\r\n      prevMonthDays.unshift(i);\r\n    }\r\n\r\n    // dodam vse dneve trenutnega meseca dnevom prejsnjega\r\n    let allDays = [];\r\n    allDays = prevMonthDays;\r\n    for (let i = 1; i <= numberOfDays; i++) {\r\n      let value = i;\r\n      // Vsak dan se pogleda ce je praznik - ce je, se element spremeni v seznam z vrednostima dan v mesecu in ime praznika - [8, 'Presernov dan']\r\n      props.celebrations.map((event) => {\r\n        if (event[0] === value) {\r\n          value = [value, event[3]];\r\n        }\r\n        return value;\r\n      });\r\n\r\n      allDays.push(value);\r\n    }\r\n\r\n    // dnevi, ki jih dodam iz naslednjega meseca, dokler ne bo zadnji teden zapolnjen z dnevi naslednjega meseca - da bo stevilo deljivo s 7\r\n    let addDays = 1;\r\n    while (allDays.length % 7 !== 0) {\r\n      allDays.push(addDays);\r\n      addDays += 1;\r\n    }\r\n\r\n    // zaradi lazjega prikaza, se ta seznam razdeli na seznam seznamov. Vsak seznam znotraj predstavlja 1 teden\r\n    let weeksBySeven = [];\r\n    while (allDays.length) {\r\n      weeksBySeven.push(allDays.splice(0, 7));\r\n    }\r\n\r\n    return weeksBySeven;\r\n  };\r\n\r\n  // Na podlagi meseca in leta, ki sta bila v komponento podana kot props se dobi podatke o trenutnem mesecu\r\n  const newValues = newDate(props.month, props.year);\r\n\r\n  /**\r\n   * showValues je funkcija, ki na podlagi seznama tednov zgenerira vsebino tabele, ki predstavlja koledar\r\n   */\r\n  const showValues = newValues.map((row) => (\r\n    // vsak teden je svoja tr v tabeli\r\n    <tr key={row}>\r\n      {row.map((item) => {\r\n        let className = 'thisMonth'; // v osnovi se predvideva, da je dan iz tega meseca\r\n\r\n        // v primeru, da je dan v prvi vrstici in je vecji od 20 ali pa je v zadnji vrstici in manjsi od 20 - pomeni da to ni element trenutnega meseca\r\n        if (\r\n          (newValues[0] === row && item > 20) ||\r\n          (newValues[newValues.length - 1] === row && item < 20)\r\n        ) {\r\n          className = 'otherMonth';\r\n        }\r\n\r\n        // ce je element object, kar pomeni da je praznik, se doda className celebration\r\n        if (typeof item === 'object') {\r\n          className += ' celebration';\r\n          // ob primeru praznika, se vrne tako dan kot tudi besedilo praznika\r\n          return (\r\n            <td className={className} key={item}>\r\n              <span>{item[0]}</span>\r\n              <p>{item[1]}</p>\r\n            </td>\r\n          );\r\n        }\r\n        // v primeru da je navaden dan, se vrne le stevilka dneva\r\n        return (\r\n          <td className={className} key={item}>\r\n            {item}\r\n          </td>\r\n        );\r\n      })}\r\n    </tr>\r\n  ));\r\n\r\n  // Komponenta Calendar tako prikaze showValues, kar je koledar\r\n  return <tbody id=\"calendar-body\">{showValues}</tbody>;\r\n};\r\n\r\nexport default Calendar;\r\n","import { useEffect, useState } from 'react';\nimport './App.scss';\nimport Calendar from './Components/Calendar';\nimport axios from 'axios';\n\nconst App = () => {\n  /*\n  year - trenutno izbrano leto, na zacetku je to trenutno leto (2021)\n  month - trenutno izbran mesec, april na zacetku\n  celebrations - vsi prazniki, ki so shranjeni v dates.txt\n  */\n  const [year, newYear] = useState(new Date().getFullYear());\n  const [month, newMonth] = useState(new Date().getMonth());\n  const [celebrations, setCelebrations] = useState([]);\n\n  // Vsak mesec z zaporedno stevilko\n  const months = [\n    ['Januar', 0],\n    ['Februar', 1],\n    ['Marec', 2],\n    ['April', 3],\n    ['Maj', 4],\n    ['Junij', 5],\n    ['Julij', 6],\n    ['Avgust', 7],\n    ['September', 8],\n    ['Oktober', 9],\n    ['November', 10],\n    ['December', 11],\n  ];\n\n  /**\n   * V useEffect se s pomocjo axios.get dobi podatke o datumih v dates.txt\n   */\n  useEffect(() => {\n    var text;\n    axios.get('./dates.txt').then((res) => {\n      // razdeli celotno datoteko na podlagi nove vrstice\n      text = res.data.split('\\n');\n      // vsako vrstico razdeli Å¡e na podlagi separatorja ;\n      text = text.map((item) => item.split(';'));\n      // prve tri argumente (dan, mesec, leto) spremeni v stevilo\n      text = text.map((item) => {\n        item[0] = parseInt(item[0]);\n        item[1] = parseInt(item[1]);\n        item[2] = parseInt(item[2]);\n        return item;\n      });\n\n      /**\n       * nastavim text, ki je na koncu list of lists, kot state celebrations\n       * Primer:\n       * [[1,1,0,'Novo leto'], [15,4,2021,'Rok za oddajo']]\n       * Ce je leto 0 -> dogodek se dogaja vsako leto.\n       */\n\n      setCelebrations(text);\n    });\n  }, []);\n\n  /**\n   * Na podlagi izbranega meseca in leta, filtira vse praznike v celebrations\n   * Najprej se gleda, ce je pravi mesec, in potem tudi leto\n   */\n  const filteredCelebrations = celebrations.filter(\n    (celebration) =>\n      celebration[1] - 1 === parseInt(month) &&\n      (celebration[2] === 0 || celebration[2] === parseInt(year))\n  );\n\n  /**\n   * Za izbiro meseca se na podlagi seznama mesecev naredijo option za select komponento\n   */\n  const options = months.map((month) => (\n    <option key={month[1]} value={month[1]}>\n      {month[0]}\n    </option>\n  ));\n\n  /**\n   * Ko uporabnik izbere drug option v select, se posodobi mesec v month state\n   */\n  const changeMonthSelect = (event) => {\n    newMonth(event.target.value);\n  };\n\n  /**\n   * Ko uporabnik spremeni leto se posodobi leto v year state\n   */\n  const changeYear = (event) => {\n    let value = event.target.value;\n\n    // Ce je vnesena stevilka daljsa kot 4 simbole se skrajsa stevilo za eno mesto -> 23456 postane 3456\n    if (value.length > 4) value = value.slice(1, 5);\n\n    // V primeru ce je dolzina letnice manjsa kot 4 se dodajo na zacetku 0 -> 34 postane 0034\n    while (value.length !== 4) {\n      value = '0' + value;\n    }\n    newYear(value);\n  };\n\n  /**\n   * Ce uporabnik spremeni mesec in leto v date komponenti.\n   */\n  const changeBoth = (event) => {\n    let value = event.target.value;\n\n    // Dobljen datum se loci na podlagi - -> 2021-04-05 postane [2021,04,05]\n    let split = value.split('-');\n\n    let year = split[0];\n    // ce je dolzina letnice vecja kot 4 se skrajsa za eno mesto\n    if (year.length > 4) year = year.slice(1, 5);\n\n    let month = split[1];\n\n    // Ce je katerikoli od vnesenih argumetnov 0 je leto 2021 in mesec 4\n    if (isNaN(parseInt(year))) {\n      year = 2021;\n      month = 4;\n    }\n\n    newYear(year);\n    newMonth(month - 1);\n  };\n\n  /**\n   * Funckija ki na podlagi meseca in leta zgenerira datum, ki ga uporabi date input\n   */\n\n  const valueOfDate = (month, year) => {\n    // shranjen mesec ima vedno manjso stevilo kot pa ga ima na koledarju -> Marec ima stevilo 2, zato ga je potrebno povecati\n    let realMonth = parseInt(month) + 1;\n    let result = realMonth;\n    // ce ima mesec samo eno stevko, se mu doda 0 pred, da deluje\n    if (realMonth < 10) result = '0' + realMonth;\n\n    // vedno se vrne prvi dan v mesecu, saj je vazen vedno samo mesec in leto\n    return year + '-' + result + '-01';\n  };\n\n  return (\n    <div id=\"content\">\n      <div id=\"inputs\">\n        <div>\n          <input\n            type=\"date\"\n            value={valueOfDate(month, year)}\n            id=\"date\"\n            onChange={changeBoth}\n          />\n        </div>\n        <div>\n          <select id=\"month-select\" onChange={changeMonthSelect} value={month}>\n            {options}\n          </select>\n          <input\n            value={year}\n            id=\"year-select\"\n            type=\"number\"\n            min=\"0001\"\n            max=\"9999\"\n            onChange={changeYear}\n          />\n        </div>\n      </div>\n      <table id=\"calendar\">\n        <thead>\n          <tr>\n            <th id=\"header-month\" colSpan=\"7\">\n              {months[month][0]} {year}\n            </th>\n          </tr>\n        </thead>\n        <thead>\n          <tr>\n            <th>Ponedeljek</th>\n            <th>Torek</th>\n            <th>Sreda</th>\n            <th>Äetrtek</th>\n            <th>Petek</th>\n            <th>Sobota</th>\n            <th>Nedelja</th>\n          </tr>\n        </thead>\n        <Calendar\n          year={year}\n          month={month}\n          celebrations={filteredCelebrations}\n        />\n      </table>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}